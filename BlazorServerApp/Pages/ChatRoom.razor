@page "/chatroom"
@inject NavigationManager navigationManager
@inject UserService userService
@using Microsoft.AspNetCore.SignalR.Client;

<h3>Chat</h3>


<h1>Chat - Blazor SignalR</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Podaj nazwę, aby rozpocząć:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chatuj!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>Jesteś połączony jako <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Rozłącz</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="Wpisz swoją wiadomość!" @bind="@_newMessage"></textarea>

        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Wyślij</button>
            <select class="form-select" @bind="@_to">
                <option value="All">Wszyscy</option>
                    @foreach (var user in userService.GetAll())
                    {
                        if (user.Username != _username)
                        {
                            <option value="@user.Username">@user.Username</option>
                        }
                    }
            </select>
    </div>
}


@code {
    // flag to indicate chat status
    private bool _isChatting = false;
    // name of the user who will be chatting
    private string _username;
    // on-screen message
    private string _message;
    // new message input
    private string _newMessage;
    // list of messages in chat
    private List<Message> _messages = new List<Message>();
    private string _hubUrl;
    private HubConnection _hubConnection;
    private string _to = "All";
    private List<(string ConnectionId, string Username)> _users = new List<(string ConnectionId, string Username)>();

    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Podaj swoją nazwę!";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            _hubConnection.On<string, string>("Private", PrivateMessage);

            await _hubConnection.StartAsync();

            userService.Add(_hubConnection.ConnectionId, _username);

            await SendAsync($"[Notice] {_username} dołączył do czatu.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Problem z rozpoczęciem czatu: {e.Message}";
            _isChatting = false;
        }
    }


    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        InvokeAsync(StateHasChanged);
    }


    private void PrivateMessage(string name, string message)
    {
        _messages.Add(new Message(name, $"[Private]: {message}", false));
        InvokeAsync(StateHasChanged);
    }


    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} wyszedł z czatu.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
            userService.RemoveByName(_username);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _users = userService.GetAll().ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting users: {ex.Message}");
        }

        await base.OnInitializedAsync();
    }


    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            if (_to == "All")
            {
                await _hubConnection.SendAsync("Broadcast", _username, message);
            }
            else
            {
                string connectionId = userService.GetConnectionIdByName(_to);
                await _hubConnection.SendAsync("Private", _username, connectionId, message);
            }

            _newMessage = string.Empty;
        }
    }


    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}